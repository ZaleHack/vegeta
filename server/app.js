require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');

// Import des routes
const authRoutes = require('./routes/auth.js');
const searchRoutes = require('./routes/search.js');
const statsRoutes = require('./routes/stats.js');
const userRoutes = require('./routes/users.js');
const uploadRoutes = require('./routes/upload.js');

// Initialisation de la base de donnÃ©es
const database = require('./config/database.js');

const app = express();

// Middlewares
app.use(cors({
  origin: process.env.NODE_ENV === 'production' ? false : true,
  credentials: true
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Trust proxy pour obtenir la vraie IP
app.set('trust proxy', 1);

// Servir les fichiers statiques du build React
app.use(express.static(path.join(__dirname, '../dist')));

// Routes API
app.use('/api/auth', authRoutes);
app.use('/api/search', searchRoutes);
app.use('/api/stats', statsRoutes);
app.use('/api/users', userRoutes);
app.use('/api/upload', uploadRoutes);

// Route de santÃ©
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    database: 'MySQL'
  });
});

// Servir l'application React pour toutes les autres routes
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});

// Gestionnaire d'erreurs global
app.use((error, req, res, next) => {
  console.error('Erreur non gÃ©rÃ©e:', error);
  res.status(500).json({ 
    error: process.env.NODE_ENV === 'production' 
      ? 'Erreur interne du serveur' 
      : error.message 
  });
});

// Gestionnaire pour les routes non trouvÃ©es
app.use((req, res) => {
  res.status(404).json({ error: 'Route non trouvÃ©e' });
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`ðŸš€ Serveur VEGETA dÃ©marrÃ© sur le port ${PORT}`);
  console.log(`ðŸ“Š Base de donnÃ©es: MySQL`);
  console.log(`ðŸ”’ Mode: ${process.env.NODE_ENV || 'development'}`);
});

// Gestion propre de l'arrÃªt
process.on('SIGINT', () => {
  console.log('ArrÃªt du serveur VEGETA...');
  database.close().then(() => {
    console.log('âœ… Connexions fermÃ©es');
    process.exit(0);
  });
});