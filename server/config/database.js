import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class DatabaseManager {
  constructor() {
    this.db = null;
    this.init();
  }

  async init() {
    try {
      console.log('üîå Initializing SQLite connection...');
      
      // Cr√©er le r√©pertoire data s'il n'existe pas
      const dbPath = path.join(__dirname, '../../data/vegeta.db');
      
      this.db = await open({
        filename: dbPath,
        driver: sqlite3.Database
      });

      console.log('‚úÖ Connexion SQLite √©tablie avec succ√®s');

      // Cr√©er les tables syst√®me
      await this.createSystemTables();
    } catch (error) {
      console.error('‚ùå Erreur connexion SQLite:', error);
      throw error;
    }
  }

  async createSystemTables() {
    try {
      // Cr√©er la table users
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          login TEXT UNIQUE NOT NULL,
          mdp TEXT NOT NULL,
          admin INTEGER DEFAULT 0,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);
      
      // Cr√©er la table search_logs
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS search_logs (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER,
          username TEXT,
          search_term TEXT,
          tables_searched TEXT,
          results_count INTEGER DEFAULT 0,
          execution_time_ms INTEGER DEFAULT 0,
          ip_address TEXT,
          user_agent TEXT,
          search_date DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);

      // Cr√©er des tables de d√©monstration avec des donn√©es d'exemple
      await this.createDemoTables();

      console.log('‚úÖ Tables syst√®me cr√©√©es avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation tables syst√®me:', error);
    }
  }

  async createDemoTables() {
    try {
      // Table esolde.mytable
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS esolde_mytable (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          matricule TEXT,
          nomprenom TEXT,
          cni TEXT,
          telephone TEXT
        )
      `);

      // Table rhpolice.personne_concours
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS rhpolice_personne_concours (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          prenom TEXT,
          nom TEXT,
          date_naiss TEXT,
          lieu_naiss TEXT,
          sexe TEXT,
          adresse TEXT,
          email TEXT,
          telephone TEXT,
          cni TEXT,
          prenom_pere TEXT,
          nom_pere TEXT,
          nom_mere TEXT
        )
      `);

      // Table autres.entreprises
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS autres_entreprises (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          ninea_ninet TEXT,
          raison_social TEXT,
          region TEXT,
          telephone TEXT,
          email TEXT,
          adresse TEXT
        )
      `);

      // Ins√©rer des donn√©es de d√©monstration
      await this.insertDemoData();

    } catch (error) {
      console.error('‚ùå Erreur cr√©ation tables de d√©monstration:', error);
    }
  }

  async insertDemoData() {
    try {
      // V√©rifier si des donn√©es existent d√©j√†
      const existingData = await this.db.get('SELECT COUNT(*) as count FROM esolde_mytable');
      if (existingData.count > 0) {
        return; // Donn√©es d√©j√† pr√©sentes
      }

      // Donn√©es de d√©monstration pour esolde
      await this.db.run(`
        INSERT INTO esolde_mytable (matricule, nomprenom, cni, telephone) VALUES
        ('MAT001', 'Jean Pierre Dupont', '1234567890123', '77 123 45 67'),
        ('MAT002', 'Marie Claire Diallo', '2345678901234', '76 234 56 78'),
        ('MAT003', 'Amadou Ba', '3456789012345', '78 345 67 89')
      `);

      // Donn√©es de d√©monstration pour rhpolice
      await this.db.run(`
        INSERT INTO rhpolice_personne_concours (prenom, nom, date_naiss, lieu_naiss, sexe, adresse, email, telephone, cni, prenom_pere, nom_pere, nom_mere) VALUES
        ('Fatou', 'Sall', '1990-05-15', 'Dakar', 'F', '123 Rue de la Paix', 'fatou.sall@email.com', '77 987 65 43', '4567890123456', 'Moussa', 'Sall', 'Aissatou Diop'),
        ('Omar', 'Ndiaye', '1985-12-03', 'Thi√®s', 'M', '456 Avenue Bourguiba', 'omar.ndiaye@email.com', '76 876 54 32', '5678901234567', 'Ibrahima', 'Ndiaye', 'Khady Fall')
      `);

      // Donn√©es de d√©monstration pour entreprises
      await this.db.run(`
        INSERT INTO autres_entreprises (ninea_ninet, raison_social, region, telephone, email, adresse) VALUES
        ('SN-DKR-2023-A-12345', 'SONATEL SA', 'Dakar', '33 839 90 00', 'contact@sonatel.sn', 'Plateau, Dakar'),
        ('SN-DKR-2023-B-67890', 'SENELEC SA', 'Dakar', '33 839 55 55', 'info@senelec.sn', 'Hann, Dakar')
      `);

      console.log('‚úÖ Donn√©es de d√©monstration ins√©r√©es');
    } catch (error) {
      console.error('‚ùå Erreur insertion donn√©es de d√©monstration:', error);
    }
  }

  async query(sql, params = []) {
    try {
      const result = await this.db.all(sql, params);
      return result;
    } catch (error) {
      console.error('‚ùå Erreur requ√™te SQL:', error);
      throw error;
    }
  }

  async queryOne(sql, params = []) {
    try {
      const result = await this.db.get(sql, params);
      return result || null;
    } catch (error) {
      console.error('‚ùå Erreur requ√™te SQL:', error);
      throw error;
    }
  }

  async run(sql, params = []) {
    try {
      const result = await this.db.run(sql, params);
      return result;
    } catch (error) {
      console.error('‚ùå Erreur ex√©cution SQL:', error);
      throw error;
    }
  }

  async close() {
    if (this.db) {
      await this.db.close();
      console.log('‚úÖ Connexion SQLite ferm√©e');
    }
  }
}

export default new DatabaseManager();